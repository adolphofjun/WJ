<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pluten.wjdc.dao.WjdcDao" >

    <insert id="saveRule" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="id">
        insert into qu_rule(name,code,belong_role,visibility,num,creator,creatorTime)
        values (#{name},#{code},#{belong_role},#{visibility},#{num},#{creator},#{creatorTime});
     </insert>

    <insert id="saveRuleMust" parameterType="map">
        insert into qu_must_rule_id(belong_rule,qu_bank_id,per)
        values (#{belong_rule},#{qu_bank_id},#{per});
    </insert>
    <insert id="saveRuleRandom" parameterType="map">
        insert into qu_random_rule_id(belong_rule,qu_bank_id,per)
        values (#{belong_rule},#{qu_bank_id},#{per});
    </insert>
    <update id="updateRuleState" parameterType="map">
        update qu_rule set visibility = #{visibility} where id = #{id}
    </update>
    <delete id="deleteRuleById" parameterType="java.lang.Integer">
        delete from qu_rule where id = #{ruleId}
    </delete>
    <delete id="deleteMustBankOfRuleById" parameterType="java.lang.Integer">
        delete from qu_must_rule_id where belong_rule = #{ruleId}
    </delete>
    <delete id="deleteRandomBankOfRuleById" parameterType="java.lang.Integer">
        delete from qu_random_rule_id where belong_rule = #{ruleId}
    </delete>
    <select id="findRule" parameterType="map" resultType="map">
      <if test="SQL_TYPE_KEY==1">
          select  ru.id,ru.name,ru.code,ru.belong_role as roleId,ro.name as roleName,ru.visibility,ru.num,
          ru.creator,emp.name as creatorName, date_format(ru.creatorTime,'%Y-%m-%d') as  creatorTime
          from qu_rule ru
          left join sys_emp emp on emp.id = ru.creator
          left join sys_role ro on ro.id = ru.belong_role
      </if>
        <if test="SQL_TYPE_KEY==2">
            select  ru.id,ru.name,ru.code,ru.belong_role as roleId,ro.name as roleName,ru.visibility,ru.num,
            ru.creator,emp.name as creatorName, CONVERT(varchar, ru.creatorTime, 120 ) as creatorTime
            from qu_rule ru
            left join sys_emp emp on emp.id = ru.creator
            left join sys_role ro on ro.id = ru.belong_role
        </if>
    </select>
    <select id="findRuleMust" resultType="map" parameterType="java.lang.Integer">
         select ru.id,bank.id as bankId,bank.name,ru.per from qu_must_rule_id ru
            left join qu_bank bank on bank.id = ru.qu_bank_id
            where ru.belong_rule = #{ruleId}
    </select>
    <select id="findRuleRandom" resultType="map" parameterType="java.lang.Integer">
         select ru.id,bank.id as bankId,bank.name,ru.per from qu_random_rule_id ru
            left join qu_bank bank on bank.id = ru.qu_bank_id
            where ru.belong_rule = #{ruleId}
    </select>



    <insert id="saveQuestion"  parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="id">
        insert into qu_question(name,code,type_id,must,bank_id,visibility,keyWord,maxScore,isDelete,creator,creatorTime)
        values (#{name},#{code},#{type_id},#{must},#{bank_id},#{visibility},#{keyWord},#{maxScore},#{isDelete},#{creator},#{creatorTime});
    </insert>
    <insert id="saveSelectA" parameterType="map">
        insert into qu_select_A(name,code,score,belong_qu,title)
        values (#{name},#{code},#{score},#{belong_qu},#{title});
    </insert>
    <insert id="saveSelectB" parameterType="map">
        insert into qu_select_B(name,code,score,belong_qu,title)
        values (#{name},#{code},#{score},#{belong_qu},#{title});
    </insert>
    <insert id="saveSelectC" parameterType="map">
        insert into qu_select_C(name,code,score,belong_qu,title)
        values (#{name},#{code},#{score},#{belong_qu},#{title});
    </insert>
    <insert id="saveSelectD" parameterType="map">
        insert into qu_select_D(name,code,score,belong_qu,title)
        values (#{name},#{code},#{score},#{belong_qu},#{title});
    </insert>
    <insert id="saveSelectE" parameterType="map">
        insert into qu_select_E(name,code,score,belong_qu,title)
        values (#{name},#{code},#{score},#{belong_qu},#{title});
    </insert>
    <insert id="saveSelectF" parameterType="map">
        insert into qu_select_F(name,code,score,belong_qu,title)
        values (#{name},#{code},#{score},#{belong_qu},#{title});
    </insert>

    <select id="findQuestion" parameterType="map" resultType="map">
        <if test="SQL_TYPE_KEY == 1">
            select qu.id,qu.name,qu.code,qu.type_id,
            qu.must,qu.bank_id,bank.name as bankName,qu.visibility,qu.maxScore,
            qu.isDelete,qu.keyWord,qu.creator,emp.name as creatorName,
            date_format(qu.creatorTime,'%Y-%m-%d')as  creatorTime
            from qu_question qu
            left join qu_bank bank on bank.id = qu.bank_id
            left join sys_emp emp on emp.id = qu.creator
            where 1=1
            <if test="bankId!=null">
                and qu.bank_id = #{bankId}
            </if>
            <if test="must!=null">
                and qu.must = #{must}
            </if>
        </if>
        <if test="SQL_TYPE_KEY == 2">
            select qu.id,qu.name,qu.code,qu.type_id,
            qu.must,qu.bank_id,bank.name as bankName,qu.visibility,
            qu.isDelete,qu.keyWord,qu.creator,emp.name as creatorName,
            CONVERT(varchar, qu.creatorTime, 120 ) as creatorTime
            from qu_question qu
            left join qu_bank bank on bank.id = qu.bank_id
            left join sys_emp emp on emp.id = qu.creator
            where 1=1
            <if test="bankId!=null">
                and qu.bank_id = #{bankId}
            </if>
            <if test="must!=null">
                and qu.must = #{must}
            </if>
        </if>
    </select>

    <select id="findSelectA" resultType="map" parameterType="java.lang.Integer">
        select  a.id,a.title as title,a.score as score,a.name as name from qu_select_a a where a.belong_qu = #{questionId}
    </select>
    <select id="findSelectB" resultType="map" parameterType="java.lang.Integer">
        select  a.id,a.title as title,a.score as score,a.name as name from qu_select_b a where a.belong_qu = #{questionId}
    </select>
    <select id="findSelectC" resultType="map" parameterType="java.lang.Integer">
        select  a.id,a.title as title,a.score as score,a.name as name from qu_select_c a where a.belong_qu = #{questionId}
    </select>
    <select id="findSelectD" resultType="map" parameterType="java.lang.Integer">
        select  a.id,a.title as title,a.score as score,a.name as name from qu_select_d a where a.belong_qu = #{questionId}
    </select>
    <select id="findSelectE" resultType="map" parameterType="java.lang.Integer">
        select  a.id,a.title as title,a.score as score,a.name as name from qu_select_e a where a.belong_qu = #{questionId}
    </select>
    <select id="findSelectF" resultType="map" parameterType="java.lang.Integer">
        select a.id,a.title as title,a.score as score,a.name as name from qu_select_f a where a.belong_qu = #{questionId}
    </select>

    <update id="updateQuestState" parameterType="map">
        update qu_question set must = #{state} where id = #{quId}
    </update>

    <insert id="newWj" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        insert into qu_questionnaire (name,code,visibility,rule_id,creator,creatorTime)
        values(#{name},#{code},#{visibility},#{rule_id},#{creator},#{creatorTime})
    </insert>
    <!--保存问卷对应的可查看角色-->
    <insert id="saveQuestionnaireForRole" parameterType="map">
        insert into qu_questionnaire_role (role_id,questionnaire_id)
        values(#{roleId},#{questionnaireId})
    </insert>
    <!--查询问卷头信息-->
    <select id="findWjTitle" resultType="map" parameterType="map">
        select qu.id,qu.name,qu.code,qu.visibility,qu.creator as creatorId,emp.name as creatorName, qu.creatorTime,
            qu.rule_Id,ru.name as ruleName,ro.id as roleId,ro.name as roleName
            from qu_questionnaire qu
            left join sys_emp emp on emp.id = qu.creator
            left join qu_rule ru on ru.id = qu.rule_id
            left join sys_role ro on ro.id = ru.belong_role
    </select>

    <select id="findWjTarget" resultType="map" parameterType="java.lang.Integer">
        select emp.name,emp.id as userId
            from qu_questionnaire qu,qu_rule qru,sys_emp emp,sys_user_role ur
            where qu.rule_Id = qru.id and qru.belong_role = ur.roleId and ur.userId = emp.id and qu.id = #{quId}
    </select>

    <select id="findMustBankIdByWjId" resultType="map" parameterType="java.lang.Integer">
            select mustId.id,mustId.belong_rule as ruleId,mustId.qu_bank_id as bankId, mustId.per
            from qu_questionnaire wj,qu_must_rule_id mustId
            where wj.rule_Id = mustId.belong_rule  and wj.id = #{wjId}
    </select>

    <select id="findRandomBankIdByRuleId" resultType="map" parameterType="java.lang.Integer">
            select randomId.id,randomId.belong_rule as ruleId,randomId.qu_bank_id as bankId, randomId.per
            from qu_random_rule_id randomId
            where wj.rule_Id = #{wjId}
    </select>

    <select id="findMustBankIdByRuleId" resultType="map" parameterType="java.lang.Integer">
            select mustId.id,mustId.belong_rule as ruleId,mustId.qu_bank_id as bankId, mustId.per
            from qu_questionnaire wj,qu_must_rule_id mustId
            where wj.rule_Id = mustId.belong_rule  and wj.id = #{wjId}
    </select>

    <select id="findRandomBankIdByWjId" resultType="map" parameterType="java.lang.Integer">
            select randomId.id,randomId.belong_rule as ruleId,randomId.qu_bank_id as bankId, randomId.per
            from qu_questionnaire wj,qu_random_rule_id randomId
            where wj.rule_Id = randomId.belong_rule and  wj.id = #{wjId}
    </select>

    <select id="wjIsCanUpdate" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        select isUser from qu_questionnaire where id = #{wjId}
    </select>

    <update id="updateWjState" parameterType="map">
        update qu_questionnaire set visibility = #{visibility} where id = #{id}
    </update>

    <delete id="deleteWjById" parameterType="java.lang.Integer">
      delete from qu_questionnaire where id = #{wjId}
    </delete>
    <!--保存员工接受过的问卷表头信息-->
    <insert id="saveEmpWjTitle" parameterType="map">
        insert into sys_emp_qu_title(qu_id,an_time,score,creator,creatorTime,targetId,answerId)
        values(#{quId},#{an_time},#{score},#{creator},#{creatorTime},#{targetId},#{answerId});
    </insert>
    <!--保存员工接受过的问卷信息-->
    <insert id="saveEmpWj" parameterType="map">
        insert into sys_emp_qu(qu_id,an_time,score,creator,creatorTime,targetId,answerId)
        values(#{quId},#{an_time},#{score},#{creator},#{creatorTime},#{targetId},#{answerId});
    </insert>
    <!--查询某一个人的问卷结果-->
    <select id="findResultByTargetId" parameterType="map" resultType="map">
        select seq.score,emp.id as targetId, emp.name as targetName ,
            ans.id as ansId,ans.name as ansName,seq.qu_id as quId,qu.name as quName
            from sys_emp_qu seq
            left join sys_emp emp on emp.id = seq.targetId
            left join sys_emp ans on ans.id = seq.answerId
            left join qu_questionnaire qu on qu.id = seq.qu_id
            where  seq.targetId = #{targetId} and seq.qu_id = #{quId}
            order by seq.score
    </select>
    <!--查询某一个人的卷头信息-->
    <select id="findResultTile" parameterType="map" resultType="map">
        select seq.score,emp.id as targetId, emp.name as targetName ,
            ans.id as ansId,ans.name as ansName,seq.qu_id as quId,qu.name as quName
            from sys_emp_qu_title seq
            left join sys_emp emp on emp.id = seq.targetId
            left join sys_emp ans on ans.id = seq.answerId
            left join qu_questionnaire qu on qu.id = seq.qu_id
            where  seq.targetId = #{targetId} and seq.qu_id = #{quId}
            order by seq.creatorTime desc
    </select>
    <!--查询某一个人的问卷所有分数-->
    <select id="findScoreById" parameterType="map" resultType="Float">
        select score from sys_emp_qu qu
            where qu.qu_id = 1 and qu.targetId = 1
            order by score
    </select>



</mapper>